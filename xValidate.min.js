"use strict";let xValidateCurrentErrors=[];function xValidate(jsonRules){let correctlyValidated=!0,settings=jsonRules.settings,elements=jsonRules.elements,errorClass=null!=settings.classError?settings.classError:"xValidateError";if(document.querySelectorAll("."+errorClass).forEach((function(element){element.remove()})),null!=settings.styleErrorClass&&"xValidateStyleError"!==settings.styleErrorClass){let styledInputs=document.getElementsByClassName(settings.styleErrorClass);for(let i=0;i<styledInputs.length;i++){let input;styledInputs.item(i).classList.remove(settings.styleErrorClass)}}else{let styledInputs=document.getElementsByClassName("xValidateStyleError");for(let i=0;i<styledInputs.length;i++){let input=styledInputs.item(i);input.style.color="initial",input.style.borderColor="initial",input.classList.remove(settings.styleErrorClass)}}if(elements.forEach((function(element,index){if(null==element.id&&null==element.class)return console.error("xValidate error - Error at element of index "+index+": id or class properties not implemented. Please write the element's class or id."),!1;if(null!=element.id&&null!=element.class)return console.error("xValidate error - Error at element of index "+index+": id and class properties are both implemented. Please remove one of the properties."),!1;let lookupSymbol=null!=element.id?element.id:element.class;if(null!=element.id){let htmlElement;validateElement(document.getElementById(lookupSymbol),element)}else{let htmlElements=document.getElementsByClassName(lookupSymbol);for(let i=0;i<htmlElements.length;i++)validateElement(htmlElements.item(i),element)}})),null==settings.sendOnValidated)return!0;if(settings.sendOnValidated)if(null!=settings.form)settings.form.submit();else{let lookup="";lookup=null!=elements[0].id?"#"+elements[0].id:"."+elements[0].class,document.querySelector(lookup).parentElement().submit()}}function styleErrorClass(element,validateErrorClass=null){null!=validateErrorClass?element.classList.add(validateErrorClass):(element.classList.add("xValidateStyleError"),element.style.color="red",element.style.borderColor="red")}function validateElement(htmlElement,elementRules,errorClass="xValidateError"){let type=htmlElement.type,validation=null,errorMessage="";switch(type){case"email":validation=validateEmail(htmlElement,elementRules);break;case"number":validation=validateNumber(htmlElement,elementRules);break;default:validation=validateInput(htmlElement,elementRules)}null!=validation&&0!==validation.errors.length&&(validation.errors.forEach((function(error){errorMessage=errorMessage+error+"<br/>"})),createErrorElement(htmlElement,errorMessage,errorClass))}function validateInput(htmlInputElement,elementRules){let validated=!0,errors=[];if(null!=elementRules.properties.required&&elementRules.properties.required&&0===htmlInputElement.value.length){validated=!1;let message=getValidationErrorMessage(elementRules,"required");message=null!=message?message:"This field is required",errors.push(message)}if(null!=elementRules.properties.maxlength&&htmlInputElement.value.length>elementRules.properties.maxlength){validated=!1;let message=getValidationErrorMessage(elementRules,"min");message=null!=message?message:"This field has reached the "+elementRules.properties.maxlength+" character limit.",errors.push(message)}if(null!=elementRules.properties.minlength&&htmlInputElement.value.length<elementRules.properties.minlength){validated=!1;let message=getValidationErrorMessage(elementRules,"minlength");message=null!=message?message:"This field has not reached the "+elementRules.properties.minlength+" minimum character(s).",errors.push(message)}return{validated:validated,errors:errors}}function validateEmail(htmlInputElement,elementRules){let inputValidation=validateInput(htmlInputElement,elementRules),currentVal=htmlInputElement.value;if(null!=elementRules.properties.forceEmailValidation&&elementRules.properties.forceEmailValidation&&!currentVal.match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)){let message=getValidationErrorMessage(elementRules,"email");message=null!=message?message:"Please enter a valid email.",inputValidation.validated=!1,inputValidation.errors.push(message)}return inputValidation}function validateNumber(htmlInputElement,elementRules){let errors=[],validated=!0,inputValue=htmlInputElement.value;if(null!=elementRules.properties.required&&elementRules.properties.required&&0===inputValue.length){validated=!1;let message=getValidationErrorMessage(elementRules,"required");message=null!=message?message:"This field is required",errors.push(message)}if(null!=elementRules.properties.numberType){let regexType;switch(elementRules.properties.numberType){case"int":case"integer":regexType=/^[+-]?\d+$/;break;case"float":case"decimal":regexType=/^[+-]?\d+(\.\d+)?$/;break;default:regexType=/^\d+$/}if(!regexType.test(inputValue)){let message=getValidationErrorMessage(elementRules,"numberType");message=null!=message?message:"The current value is not a(n) "+elementRules.properties.numberType+" number type",validated=!1,errors.push(message)}}if(null!=elementRules.properties.min){let numericVal;if(parseFloat(inputValue)<elementRules.properties.min){let message=getValidationErrorMessage(elementRules,"min");message=null!=message?message:"The current value is less than "+elementRules.properties.min,validated=!1,errors.push(message)}}if(null!=elementRules.properties.max){let numericVal;if(parseFloat(inputValue)>elementRules.properties.max){let message=getValidationErrorMessage(elementRules,"max");message=null!=message?message:"The current value is greater than "+elementRules.properties.max,validated=!1,errors.push(message)}}return{errors:errors,validated:validated}}function getValidationErrorMessage(elementRules,key){return null==elementRules.messages?null:null==elementRules.messages[key]?null:elementRules.messages[key]}function createErrorElement(htmlInputElement,message,errorClass,htmlErrorClass=null){let errorElement=document.createElement("span");errorElement.classList.add(errorClass),errorElement.innerHTML=message,styleErrorClass(htmlInputElement,htmlErrorClass),htmlInputElement.parentElement.appendChild(errorElement)}